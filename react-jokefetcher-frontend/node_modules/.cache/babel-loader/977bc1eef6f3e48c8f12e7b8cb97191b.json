{"ast":null,"code":"const URL = \"http://localhost:8080/securitystarter\";\n\nfunction handleHttpErrors(res) {\n  if (!res.ok) {\n    return Promise.reject({\n      status: res.status,\n      fullError: res.json()\n    });\n  }\n\n  return res.json();\n}\n\nfunction authFacade() {\n  /* Insert utility-methods from a latter step (d) here (REMEMBER to uncomment in the returned object when you do)*/\n  const setToken = token => {\n    localStorage.setItem(\"jwtToken\", token);\n  };\n\n  const getToken = () => {\n    return localStorage.getItem(\"jwtToken\");\n  };\n\n  const loggedIn = () => {\n    const loggedIn = getToken() != null;\n    return loggedIn;\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"jwtToken\");\n  };\n\n  const login = (user, password) => {\n    const options = makeOptions(\"POST\", true, {\n      username: user,\n      password: password\n    });\n    return fetch(URL + \"/api/login\", options).then(handleHttpErrors).then(res => {\n      setToken(res.token);\n    });\n  }; // const fetchData = () => {\n  //   const options = makeOptions(\"GET\", true); //True add's the token\n  //   return fetch(URL + \"/api/info/user\", options).then(handleHttpErrors);\n  // };\n\n\n  const makeOptions = (method, addToken, body) => {\n    var opts = {\n      method: method,\n      headers: {\n        \"Content-type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    };\n\n    if (addToken && loggedIn()) {\n      opts.headers[\"x-access-token\"] = getToken();\n    }\n\n    if (body) {\n      opts.body = JSON.stringify(body);\n    }\n\n    return opts;\n  };\n\n  return {\n    makeOptions,\n    setToken,\n    getToken,\n    loggedIn,\n    login,\n    logout //   fetchData\n\n  };\n}\n\nconst facade = authFacade();\nexport default facade;","map":{"version":3,"sources":["C:/Users/frede/Desktop/3.Semester/ca3_frontend/react-jokefetcher-frontend/src/authFacade.js"],"names":["URL","handleHttpErrors","res","ok","Promise","reject","status","fullError","json","authFacade","setToken","token","localStorage","setItem","getToken","getItem","loggedIn","logout","removeItem","login","user","password","options","makeOptions","username","fetch","then","method","addToken","body","opts","headers","Accept","JSON","stringify","facade"],"mappings":"AAAA,MAAMA,GAAG,GAAG,uCAAZ;;AAEA,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AAC7B,MAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACX,WAAOC,OAAO,CAACC,MAAR,CAAe;AAAEC,MAAAA,MAAM,EAAEJ,GAAG,CAACI,MAAd;AAAsBC,MAAAA,SAAS,EAAEL,GAAG,CAACM,IAAJ;AAAjC,KAAf,CAAP;AACD;;AACD,SAAON,GAAG,CAACM,IAAJ,EAAP;AACD;;AAED,SAASC,UAAT,GAAsB;AACpB;AACA,QAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1BC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC;AACD,GAFD;;AAGA,QAAMG,QAAQ,GAAG,MAAM;AACrB,WAAOF,YAAY,CAACG,OAAb,CAAqB,UAArB,CAAP;AACD,GAFD;;AAGA,QAAMC,QAAQ,GAAG,MAAM;AACrB,UAAMA,QAAQ,GAAGF,QAAQ,MAAM,IAA/B;AACA,WAAOE,QAAP;AACD,GAHD;;AAIA,QAAMC,MAAM,GAAG,MAAM;AACnBL,IAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACD,GAFD;;AAIA,QAAMC,KAAK,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AAChC,UAAMC,OAAO,GAAGC,WAAW,CAAC,MAAD,EAAS,IAAT,EAAe;AACxCC,MAAAA,QAAQ,EAAEJ,IAD8B;AAExCC,MAAAA,QAAQ,EAAEA;AAF8B,KAAf,CAA3B;AAIA,WAAOI,KAAK,CAACzB,GAAG,GAAG,YAAP,EAAqBsB,OAArB,CAAL,CACJI,IADI,CACCzB,gBADD,EAEJyB,IAFI,CAEExB,GAAD,IAAS;AACbQ,MAAAA,QAAQ,CAACR,GAAG,CAACS,KAAL,CAAR;AACD,KAJI,CAAP;AAKD,GAVD,CAhBoB,CA2BpB;AACA;AACA;AACA;;;AACA,QAAMY,WAAW,GAAG,CAACI,MAAD,EAASC,QAAT,EAAmBC,IAAnB,KAA4B;AAC9C,QAAIC,IAAI,GAAG;AACTH,MAAAA,MAAM,EAAEA,MADC;AAETI,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD;AAFA,KAAX;;AAOA,QAAIJ,QAAQ,IAAIZ,QAAQ,EAAxB,EAA4B;AAC1Bc,MAAAA,IAAI,CAACC,OAAL,CAAa,gBAAb,IAAiCjB,QAAQ,EAAzC;AACD;;AACD,QAAIe,IAAJ,EAAU;AACRC,MAAAA,IAAI,CAACD,IAAL,GAAYI,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAZ;AACD;;AACD,WAAOC,IAAP;AACD,GAfD;;AAgBA,SAAO;AACLP,IAAAA,WADK;AAELb,IAAAA,QAFK;AAGLI,IAAAA,QAHK;AAILE,IAAAA,QAJK;AAKLG,IAAAA,KALK;AAMLF,IAAAA,MANK,CAOL;;AAPK,GAAP;AASD;;AACD,MAAMkB,MAAM,GAAG1B,UAAU,EAAzB;AACA,eAAe0B,MAAf","sourcesContent":["const URL = \"http://localhost:8080/securitystarter\";\r\n\r\nfunction handleHttpErrors(res) {\r\n  if (!res.ok) {\r\n    return Promise.reject({ status: res.status, fullError: res.json() });\r\n  }\r\n  return res.json();\r\n}\r\n\r\nfunction authFacade() {\r\n  /* Insert utility-methods from a latter step (d) here (REMEMBER to uncomment in the returned object when you do)*/\r\n  const setToken = (token) => {\r\n    localStorage.setItem(\"jwtToken\", token);\r\n  };\r\n  const getToken = () => {\r\n    return localStorage.getItem(\"jwtToken\");\r\n  };\r\n  const loggedIn = () => {\r\n    const loggedIn = getToken() != null;\r\n    return loggedIn;\r\n  };\r\n  const logout = () => {\r\n    localStorage.removeItem(\"jwtToken\");\r\n  };\r\n\r\n  const login = (user, password) => {\r\n    const options = makeOptions(\"POST\", true, {\r\n      username: user,\r\n      password: password,\r\n    });\r\n    return fetch(URL + \"/api/login\", options)\r\n      .then(handleHttpErrors)\r\n      .then((res) => {\r\n        setToken(res.token);\r\n      });\r\n  };\r\n  // const fetchData = () => {\r\n  //   const options = makeOptions(\"GET\", true); //True add's the token\r\n  //   return fetch(URL + \"/api/info/user\", options).then(handleHttpErrors);\r\n  // };\r\n  const makeOptions = (method, addToken, body) => {\r\n    var opts = {\r\n      method: method,\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    };\r\n    if (addToken && loggedIn()) {\r\n      opts.headers[\"x-access-token\"] = getToken();\r\n    }\r\n    if (body) {\r\n      opts.body = JSON.stringify(body);\r\n    }\r\n    return opts;\r\n  };\r\n  return {\r\n    makeOptions,\r\n    setToken,\r\n    getToken,\r\n    loggedIn,\r\n    login,\r\n    logout,\r\n    //   fetchData\r\n  };\r\n}\r\nconst facade = authFacade();\r\nexport default facade;\r\n"]},"metadata":{},"sourceType":"module"}